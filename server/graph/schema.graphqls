scalar Time

# --------------- Models ---------------

type User {
  id: ID!
  username: String!
  email: String
}

type Todo {
  id: ID!
  userId: String!
  text: String!
  done: Boolean!
  priority: Int!
  tag: String!
  boardId: String!
  createdAt: Time!
  updatedAt: Time!
}

type Board {
  id: ID!
  userId: String!
  name: String!
  todoIds: [String]!
  createdAt: Time!
  updatedAt: Time!
}

# --------------- Inputs ---------------

input NewUser {
  email: String!
  username: String
}

input NewTodo {
  text: String!
  userId: String!
}

input NewBoard {
  userId: String!
  name: String!
  todoIds: [String]!
}

input UpdateTodo {
  id: String!
  userId: String!
  text: String
  done: Boolean
  priority: Int
  tag: String
  boardId: String
}

input UpdateBoard {
  id: String!
  userId: String!
  name: String!
  todos: [String]!
}

# --------- Queries & Mutations ---------

type Query {
  getUser(email: String!): User
  getUsers: [User]!
  #
  getTodo(todoId: String!): Todo!
  getTodos(userId: String!, fresh: Boolean!): [Todo]!
  #
  getBoard(boardId: String!): Board!
  getBoards(userId: String!, fresh: Boolean!): [Board]!
}

type Mutation {
  createUser(newUser: NewUser!): User!
  deleteUser(userId: String!): Boolean
  #
  createTodo(newTodo: NewTodo!): Todo!
  updateTodo(updateTodo: UpdateTodo!): String!
  deleteTodo(userId: String!, todoId: String!): String!
  #
  createBoard(newBoard: NewBoard!): Board!
  updateBoard(updateBoard: UpdateBoard!): String!
  deleteBoard(userId: String!, boardId: String!): String!
}
